// Built-in includes.
#include "game.h"
#include "AIAPI.h"

// Users' includes.
#include "AI/AIGameEx1.h"


int main() {

    // Start engine.
    VoxelEng::game::init();


    // Initialize AI API and register AI games.
    VoxelEng::AIAPI::aiGame::init();
    VoxelEng::AIAPI::aiGame::registerGame<AIExample::miningAIGame>("miningAIGame");


    // PRIORITY.
    // !º. Put #ifdef GRAPIHCS API IN ALL OPENGL INCLUDES
    // !!º. Add nChunksToCompute to finite world terrain files.
    // 1º. Solve bugs in AI and engine.
    // 2º. Fix crash by minimizing the game's window (width and height are being set to 0 ¬¬).
    // 3º. Export project to a make file to stop depending on visual studio.

    // TODO Opt (AI)
    // 1º. Implement pause key for AI game playbacks.
    // 2º. Implement playing backwards in AI game recordings and corresponding key to switch between playing forward and backwards.
    // 3º. Add another AI game with non-machine-learning AI or "classic AI".

    // TODO Opt (ENGINE).
    // 1º. Pass AI mode on flag to game.h. All graphical altering methods must not be called if AI mode is ON (check all GAME API calls in the AI API methods).
    // 2º. x < nChunksToCompute ¬¬
    // 3º. Hacer testing con el chunkManager::isInWorld()
    // 4º. Set chunk manager system's ai mode on when training AIs (here).
    // 5º. Add a define containing version number and print it in any file generated by this engine.
    // 6º. Separate all input handling and add GUI redraws in separate threads.
    // 7º. Add noEngineAI mode flag.
    // 8º. Define vec3 as class with static methods.
    // 9º. Change NEGX and others to MINUSX
    // 10º. Move getBlockView dir and related data structures to entity.h
    // 11º. Put entityManager::isEntityRegistered on all sites where it is necessary.
    // 12º. Change entityManager::entityBatch_ to std::vector<batchID> or change aiGame::AIagentID to std::unordered_map<agentID, entityID>?
    // 13º. Add entity::dirty flag to tell that the entity's model needs to be regenerated.
    // 14º. Correct for (int i = 0) or for (unsigned int i = 0) with for (size_t = 0) (also #include <cstddef> for std::size_t)
    // 15º. Use ::at()s correctly ¬¬. No double check from user and creator. Only creator checks.
    // 16º. Refine 'world' class.
    // 17º. Make that you do not have to specify and ID when registering a model? Specify model by file name?
    // 18º. Make different observer methods with bounds checking (with name ending at "At") or without it (without name ending at "At").
    // 19º. Add option to add entities from start without being active.
    // 20º. Change 'block' in models.h for unsigned int.
    // 21º. See if you can quit the '-' symbol from being used in terrain files.
    // 22º. Graphical API-dependent #includes must be only included if using the corresponding graphic API.
    // 23º. Add doxygen support for documentation.
    // 24º. Add conf file.
    // 25º. Put mat4, mat::cross, mat::normalize, radians and other things like this definitions in definitions.h/utilities.h.


    // Conf file options
    // 1º. Cleaning graphical mode stuff after exiting graphical menu: 0 for no, 1 for yes, 2 for always ask before exiting said menu.


    // FUTURE.
    // 1º. Add block highlighting and use it in aiGame::getBlocksBox to highlight the agent's selection area.
    // 2º. Add own implementations of perlin and simplex noise generators.


    VoxelEng::game::mainLoop();

    // Exit game.
    VoxelEng::game::cleanUp();
    VoxelEng::AIAPI::aiGame::cleanUp();


    return 0;

}